#!/bin/sh
# -*- sh -*-

: << =cut

=head1 NAME

cpufreq - Plugin to monitor CPU frequency

=head1 APPLICABLE SYSTEMS

Systems with working cpufrequtils installation can access stats
via cpufreq-info command. Using stats directory may not be as reliable,
cf. https://bugzilla.kernel.org/show_bug.cgi?id=57941#c5

=head1 CONFIGURATION

None.

=head1 INTERPRETATION

Using stats directory as do cpuspeed munin original script
may not be reliable, "the info that you are getting from cpufreq stats 
is only what requests were made and not frequency."
cf. https://bugzilla.kernel.org/show_bug.cgi?id=57941#c5

The plugin does not reinvent the wheel by directly accessing /sys directory, 
should not depends on what exact kernel version you run. It just call 
cpufreq-info that hopefully will do a proper job.

=head1 BUGS

Nah.

=head1 AUTHOR

Nicolai Langfeldt

=head1 LICENSE

GPLv2

=head1 MAGIC MARKERS

 #%# family=auto
 #%# capabilities=autoconf

=cut

. $MUNIN_LIBDIR/plugins/plugin.sh

BIN=/usr/bin/cpufreq-info
if [ "$1" = "autoconf" ]; then
    if [ -x "$BIN" ] ; then
        echo yes
        exit 0
    else
        echo "no (unable to find/run $BIN)"
        exit 0
    fi
fi


if [ "$1" = "config" ]; then
    echo graph_title CPU frequency scaling
    echo graph_args --base 1000
    echo graph_info This graph shows the current frequency at which the CPUs are running
    echo graph_category system

    echo "graph_vlabel Hz"

    for c in /sys/devices/system/cpu/cpu[0-9]*; do
        N=${c##*/cpu}

        echo "cpu$N.label CPU $N"
        echo "cpu$N.type DERIVE"
        echo "cpu$N.max `$BIN --cpu $N --hwlimits | cut -d ' ' -f 2`"
        echo "cpu$N.min `$BIN --cpu $N --hwlimits | cut -d ' ' -f 1`"
    done
    exit 0;
fi

for c in /sys/devices/system/cpu/cpu[0-9]*; do
    N=${c##*/cpu}
    echo "cpu$N.value `$BIN --cpu $N --hwfreq`"
done
