#!/usr/bin/perl
#
# Copyright (c) 2013 Mathieu Roy <yeupou--gnu.org>
#      http://yeupou.wordpress.com
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
#   USA

use strict;
use LWP::UserAgent;
use HTTP::Request;
use HTTP::Response;
use HTML::TableExtract;
use File::Find;
use Number::Bytes::Human;
use CGI qw(:standard Link);

## SETUP 
my $dir = "/srv/www/depot";
my $list = "$dir/depots.html";
my $nginx_conf = "/etc/nginx/sites-enabled/steam";
my $steamdb_baseurl="http://steamdb.info/app";
my $steamdb_unknown_string="Unknown / Deleted App";

my $debug = 0;
my $debug_sample = 0;
$debug = 1 if -e "$dir/debug";

# no point to run if no depots directory available
exit unless chdir($dir);
# no point to run if steam not enabled in nginx
exit unless -e $nginx_conf;

## SLURP INFO
my (%depots, %depot_size, %depot_name);
while (defined(my $depot = glob('*'))) {
    # only deal with directories
    next unless -d $depot;
    # with only numeric names
    next if $depot =~ /\D/;
    # assume that's a valid depot to work with proceed
    print "$depot:\n" if $debug;

    ## register the depot
    $depots{$depot} = $depot;
    
    ## get local file info: du size
    ($depot_size{$depot},) = split(/\W/, `du --summarize --block-size=1 $dir/$depot`);
    print " size: ".$depot_size{$depot}."\n" if $debug;

    ## get distant (steamdb webpages) info to obtain a proper name
    my $url = "$steamdb_baseurl/$depot/";
    my $useragent = LWP::UserAgent->new();
    $useragent->agent("Mozilla 5.0 (Debian, kFreeBSD) Iceweasel 10.1");
    $useragent->show_progress(1) if $debug;
    $useragent->timeout(25);
    my $request = HTTP::Request->new(GET => $url);
    $request->referer("http://yeupou.wordpress.com/");
    my $result = $useragent->request($request);
    
    # skip on failure
    next if $result->is_error();
    
    # otherwise go through the content to find something nice to use
    # as name. As soon as we do, go to the next entry.
    for ($result->decoded_content()) {
	# (yeah, this is ugly, wish to find some raw data)

	# look for h1 header-title
	$depot_name{$depot} = $1 if /<h1 class="header-title">([^<>]*)<\/h1>/;
	print " h1:\t\t".$depot_name{$depot}."\n" if $debug;
	last unless $depot_name{$depot} eq $steamdb_unknown_string;

	# look for the next clever spot, that is the history
	$depot_name{$depot} = $1 if /App was deleted, previous name: <b>([^<>]*)<\/b>/;
	print " deleted was:\t".$depot_name{$depot}."\n" if $debug;
	last unless $depot_name{$depot} eq $steamdb_unknown_string;
	
	# worse, the list of Packages that include the app. Take the 
	# latest of the list because the first ones are often kind of
	# vague (ie: sub NN, etc)
	# This is really really vague.
	my $tableextract = HTML::TableExtract->new(headers => [("SubID", "Name", "Last Updated")]);
	$tableextract->parse($_);
	foreach my $table ($tableextract->tables()) { 
	    foreach my $row ($table->rows()) {
		# field were as follow: id, name, last update
		# we care only for the second
		my ($id,$name,$timestamp) = (@$row);
		print "\tsub$id: $name...\n" if $debug;

		# first skip meaningless names or collections like
		# Sub / ValveTest / Comp
		next if $name =~ /Sub |ValveTest|Comp|Collection|Bundle| Sale| Retail|Weekend/;
		# remove parenthesis if any
		$name =~ s/ \(\w*\)//g;

		# save the name if we have none so far
		$depot_name{$depot} = $name." ~" 
		    unless exists($depot_name{$depot});
		print "\t\tok\n" if $debug;

		# then look further entries 
		# if we can find a recent and clean name
		# skip bundles:
		next if $name =~ / OSX |BAFTA 20| Demo| Franchise| Gift|(2|4|Two|Four) Pack/;
		# skip unlikely locales
		next if $name =~ / (PL|RU|RU\+CIS|ROW|JP)$/;

		# if we get here, overwrite what we had before
		$depot_name{$depot} = $name." ~";
		print "\t\tok+\n" if $debug;
	    }
	}
	print " subs:\t\t".$depot_name{$depot}."\n" if $debug;
	
    }
        
    # no name found? worse case scenario, use the page title
    $depot_name{$depot} = $result->title()
	unless exists($depot_name{$depot});
    print " head:\t\t".$depot_name{$depot}."\n" if $debug;

    print "\n" if $debug;

    last if $debug_sample > 2;
    $debug_sample++ if $debug_sample;
}


## PRINT INFO
open(OUTPUT, "> $list")
    or die "Unable to write to $list, died";
print OUTPUT start_html(-encoding => 'UTF-8',
			-title => 'Local Steam Depots Cache').
    h1("Local Steam Depots Cache").
    "<pre>";
# print order by name
foreach (sort{lc($depot_name{$a}) cmp lc($depot_name{$b})} keys(%depots)) {
    print "$_ -> $list\n" if $debug;
    my $human = Number::Bytes::Human->new(bs => 1024);
    my $size = $human->format($depot_size{$_});
    $size = b($size) if $depot_size{$_} > 999999999;
    print OUTPUT a({-href=>$_}, $_)."\t\t".$size."\t".a({-href=>"$steamdb_baseurl/$_"}, $depot_name{$_})."\n";  
}

print OUTPUT "</pre>".
    end_html();
close(OUTPUT);

# EOF
