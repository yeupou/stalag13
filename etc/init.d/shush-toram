#
# FILE DISCONTINUED HERE
# UPDATED VERSION AT
#         https://gitlab.com/yeupou/stalag13/raw/master/etc/init.d/shush-toram
#
#                                 |     |
#                                 \_V_//
#                                 \/=|=\/
#                                  [=v=]
#                                __\___/_____
#                               /..[  _____  ]
#                              /_  [ [  M /] ]
#                             /../.[ [ M /@] ]
#                            <-->[_[ [M /@/] ]
#                           /../ [.[ [ /@/ ] ]
#      _________________]\ /__/  [_[ [/@/ C] ]
#     <_________________>>0---]  [=\ \@/ C / /
#        ___      ___   ]/000o   /__\ \ C / /
#           \    /              /....\ \_/ /
#        ....\||/....           [___/=\___/
#       .    .  .    .          [...] [...]
#      .      ..      .         [___/ \___]
#      .    0 .. 0    .         <---> <--->
#   /\/\.    .  .    ./\/\      [..]   [..]
#
#!/bin/sh

### BEGIN INIT INFO
# Provides:          shush-toram
# Required-Start:    $local_fs
# Required-Stop:     $local_fs
# X-Start-Before:    $syslog
# X-Stop-After:      $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Silence the hard disk by using tmpfs for /var/log and other directories
# X-Interactive:   yes
### END INIT INFO

# Based on
# http://www.debian-administration.org/article/661/A_transient_/var/log
# and debian tmpfs for /var/run and /var/lock
# but also any other directories

NAME=shush-toram
DESC="hard disk silencer"
RAMNAME=tmpfs
RAMDIRS=/var/log
MINSIZE=52428800

# Include defaults if available
if [ -f /etc/default/$NAME ] ; then
    . /etc/default/$NAME
fi

# Return
#   0 been started or already running
#   1 failure

# Load rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

do_start()
{
    # not root? fail
    [ `id -u` -eq 0 ] || return 2

    # set default return value to success
    RETURN=0
    
    # proceed for each directory
    for RAMDIR in $RAMDIRS; do
	RAMLOCK=/var/lock/shush-`echo $RAMDIR | sed s@/@@g`.lock
	SOLIDDIR=`dirname $RAMDIR`/.`basename $RAMDIR`-solid
	
	# there is a fishy lock, fail with warning
	[ -h $RAMLOCK ] && RETURN=1 && continue

	# RAMDIR non-existant? silent fail
	[ -d $RAMDIR ] || continue
	
	# keep ownership and mode
	DIRMODE=`stat -c "%a" $RAMDIR`
	DIRUID=`stat -c "%u" $RAMDIR`
	DIRGID=`stat -c "%g" $RAMDIR`
	
	# make sure SOLIDDIR exists, with proper modes and ownership
	[ -d $SOLIDDIR ] || mkdir $SOLIDDIR
	chmod $DIRMODE $SOLIDDIR
	chown $DIRUID:$DIRGID $SOLIDDIR
    
	# bind the original directory before putting up the ramdisk
	# (unless there's a lock already - handling restart)
	[ ! -f $RAMLOCK ] && mount --bind $RAMDIR $SOLIDDIR

 	# find out the directory size to set a sensible ramdisk size
	# (we can be generous as tmpfs partitions do not consume any
	# memory until it is actually needed)
	DIRSIZE=`du --summarize --bytes $RAMDIR | cut -f 1`
	DIRSIZE=$(($DIRSIZE * 6))
	[ $DIRSIZE -lt $MINSIZE ] && DIRSIZE=$MINSIZE
	
	# bring up the ramdisk
	if [ ! -f $RAMLOCK ]; then
	    # start: mount
	    mount -t tmpfs -o nodev,size=$DIRSIZE $RAMNAME $RAMDIR
	    # populate the ramdisk on success
	    [ $? -eq 0 ] && cp -rfp $SOLIDDIR -T $RAMDIR
	    # set a lock on success
	    [ $? -eq 0 ] && set -o noclobber && echo $RAMDIR > $RAMLOCK && set +o noclobber
	else
	    # restart: remount
	    mount -t tmpfs -o remount,nodev,size=$DIRSIZE $RAMNAME $RAMDIR	    
	fi

	# go to the next RAMDIR on success
	[ $? -eq 0 ] && continue
	
	# on failure cancel previous mounts
	umount $RAMDIR
	umount $SOLIDDIR
	# and set a fail return value
	RETURN=1
    done
    return $RETURN
}


do_stop() {
    # not root? fail
    [ `id -u` -eq 0 ] || return 2

    # set default return value to success
    RETURN=0
    
    # proceed for each directory
    for RAMDIR in $RAMDIRS; do
	RAMLOCK=/var/lock/shush-`echo $RAMDIR | sed s@/@@g`.lock
	SOLIDDIR=`dirname $RAMDIR`/.`basename $RAMDIR`-solid
	
	# there is no lock, assumes this RAMDIR is already off
	[ -f $RAMLOCK ] || continue
	
	# there is a fishy lock, fail with warning
	[ -h $RAMLOCK ] && RETURN=1 && continue
	[ ! -f $RAMLOCK ] && RETURN=1 && continue
	
	# RAMDIR non-existant? silent fail
	[ -d $RAMDIR ] || continue

        # Merge back to permanent storage
	rm -f $RAMLOCK
        /usr/bin/rsync --archive --delete $RAMDIR/ $SOLIDDIR/

	# unmount it all
        umount -l $RAMDIR
        umount -l $SOLIDDIR

	# remove the solid directory now useless, if empty
	rmdir $SOLIDDIR
    done
    return $RETURN
}

do_save() {
    # not root? fail
    [ `id -u` -eq 0 ] || return 2


    # set default return value to success
    RETURN=0
            
    # proceed for each directory
    for RAMDIR in $RAMDIRS; do
	RAMLOCK=/var/lock/shush-`echo $RAMDIR | sed s@/@@g`.lock
	SOLIDDIR=`dirname $RAMDIR`/.`basename $RAMDIR`-solid

	# there is no lock, assumes this RAMDIR is off
        [ -f $RAMLOCK ] || continue

	# there is a fishy lock, fail with warning
	[ -h $RAMLOCK ] && RETURN=1 && continue
	[ ! -f $RAMLOCK ] && RETURN=1 && continue
	
	# RAMDIR non-existant? silent fail
	[ -d $RAMDIR ] || continue
	
        # Merge back to permanent storage
	rm -f $RAMLOCK
        /usr/bin/rsync --archive --delete $RAMDIR/ $SOLIDDIR/
	set -o noclobber && echo $RAMDIR > $RAMLOCK && set +o noclobber
    done
    return $RETURN
}



case "$1" in
    start|restart)
	# start will mount the tmpfs, restart will remount it
	# so it should be transparent
	log_daemon_msg "Starting $DESC" "$RAMDIRS"
	do_start
	log_end_msg $?
	;;
    stop)
	log_daemon_msg "Stopping $DESC" "$RAMDIRS"
	do_stop
	log_end_msg $?
	;;
    status)
	# proceed for each directory
	for RAMDIR in $RAMDIRS; do
	    RAMLOCK=/var/lock/shush-`echo $RAMDIR | sed s@/@@g`.lock
            if [ -f $RAMLOCK ]; then
		echo "$RAMDIR on $RAMNAME"
	    else
		echo "$RAMDIR is not on $RAMNAME"
	    fi
	done
	;;
    reload)
	log_daemon_msg "Updating hard disk copies" "$RAMDIRS"
	do_save
	log_end_msg $?
	;;
    *)
	echo "Usage: $0 {start|stop|status|reload}" >&2
	exit 3
	;;
esac


# EOF
